openapi: 3.1.0
info:
  title: Auctions API
  version: 1.0.0
  description: A comprehensive API for managing auctions, users, and authentication
  contact:
    name: API Support
    email: support@auctions-api.com

servers:
  - url: http://localhost:8090
    description: Development server
  - url: https://api.auctions.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user ID
        email:
          type: string
          format: email
          description: The user's email address
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name
        isEmailVerified:
          type: boolean
          description: Whether the user's email is verified
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated

    CreateUser:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        password:
          type: string
          minLength: 8
          description: The user's password (minimum 8 characters)
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        password:
          type: string
          description: The user's password

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the request was successful
        message:
          type: string
          description: Response message
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            accessToken:
              type: string
              description: JWT access token

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the request was successful
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Response data

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Whether the request was successful
        message:
          type: string
          description: Error message
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that caused the error
              message:
                type: string
                description: Error message for the field

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: healthy
          description: Health status of the API

    Product:
      type: object
      properties:
        id:
          type: integer
          description: The product ID
        name:
          type: string
          description: The product name
        description:
          type: string
          description: The product description
        startingPrice:
          type: number
          format: float
          description: Starting bid price
        currentPrice:
          type: number
          format: float
          description: Current highest bid
        endDate:
          type: string
          format: date-time
          description: Auction end date
        createdAt:
          type: string
          format: date-time
          description: When the product was created
        updatedAt:
          type: string
          format: date-time
          description: When the product was last updated

    CreateProduct:
      type: object
      required:
        - name
        - description
        - startingPrice
        - endDate
      properties:
        name:
          type: string
          description: The product name
        description:
          type: string
          description: The product description
        startingPrice:
          type: number
          format: float
          description: Starting bid price
        endDate:
          type: string
          format: date-time
          description: Auction end date

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Users
    description: User management endpoints
  - name: Products
    description: Product management endpoints
  - name: System
    description: System health and status endpoints

paths:
  /status:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      tags:
        - System
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
              example:
                status: healthy

  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using refresh token
      tags:
        - Authentication
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too many refresh attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/revoke:
    post:
      summary: Revoke refresh token
      description: Invalidate the current refresh token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token successfully revoked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      summary: User logout
      description: Logout user and clear refresh token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email to user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        "200":
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user password using reset token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  description: Password reset token
                password:
                  type: string
                  minLength: 8
                  description: New password
      responses:
        "200":
          description: Password successfully reset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/verify-email:
    post:
      summary: Verify email address
      description: Verify user's email address using verification token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Email verification token
      responses:
        "200":
          description: Email successfully verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid verification token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/resend-verification:
    post:
      summary: Resend verification email
      description: Send a new email verification token to user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        "200":
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users (requires authentication)
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Create a new user
      description: Create a new user (requires authentication)
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID (requires authentication)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update user
      description: Update a specific user by their ID (requires authentication)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data or user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete user
      description: Delete a specific user by their ID (requires authentication)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        "200":
          description: User successfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all products
      tags:
        - Products
      responses:
        "200":
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"

    post:
      summary: Create a new product
      description: Create a new product in the system
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProduct"
      responses:
        "201":
          description: Product successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      responses:
        "200":
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update product
      description: Update a specific product by its ID
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProduct"
      responses:
        "200":
          description: Product successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete product
      description: Delete a specific product by its ID
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      responses:
        "200":
          description: Product successfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
